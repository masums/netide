using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Xml.Linq;

namespace NetIde.VisualStudio.FileGenerators.MenuTemplateGenerator
{
    internal static class ResourceTransformer
    {
        private static readonly XNamespace Ns = "https://github.com/pvginkel/NetIde/schemas/Resources";

        public static string Transform(string xml, IAssemblyReferenceResolver resolver)
        {
            var ids = new Dictionary<string, Guid>();

            var document = XDocument.Parse(xml);

            var imports = document.Root.Element(Ns + "imports");

            if (imports != null)
            {
                foreach (var import in document.Root.Element(Ns + "imports").Elements(Ns + "import"))
                {
                    var assembly = Assembly.Load(File.ReadAllBytes(
                        resolver.ResolveAssemblyReference(import.Attribute("from").Value)
                    ));
                    var type = assembly.GetType(import.Attribute("type").Value, true);
                    var prefixAttribute = import.Attribute("prefix");
                    string prefix = prefixAttribute != null ? prefixAttribute.Value : "";

                    foreach (var field in type.GetFields(BindingFlags.Public | BindingFlags.Static))
                    {
                        if (typeof(Guid).IsAssignableFrom(field.FieldType))
                            ids.Add(prefix + field.Name, (Guid)field.GetValue(null));
                    }
                }

                imports.Remove();
            }

            TransformElement(ids, document.Root.Element(Ns + "ui"));

            document.Root.AddBeforeSelf(new XComment(
@"
    This code was generated by a tool.

    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
"));

            return document.ToString();
        }

        private static void TransformElement(Dictionary<string, Guid> ids, XElement element)
        {
            TransformElement(ids, element, "id", "guid");
            TransformElement(ids, element, "fillCommandId", "fillCommandGuid");

            foreach (var child in element.Elements())
            {
                TransformElement(ids, child);
            }
        }

        private static void TransformElement(Dictionary<string, Guid> ids, XElement element, string attributeName, string guidAttributeName)
        {
            var attribute = element.Attribute(attributeName);

            if (attribute != null)
            {
                Guid guid;

                if (ids.TryGetValue(attribute.Value, out guid))
                    element.Add(new XAttribute(guidAttributeName, guid.ToString("B").ToUpperInvariant()));
            }
        }
    }
}
