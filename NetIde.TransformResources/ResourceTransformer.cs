using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Xml.Linq;

namespace NetIde.TransformResources
{
    internal class ResourceTransformer
    {
        private static readonly Encoding Encoding = new UTF8Encoding(true);
        private static readonly XNamespace Ns = "https://github.com/pvginkel/NetIde/schemas/Resources";

        private readonly string _fileName;
        private readonly string _targetFileName;
        private readonly Dictionary<string, Guid> _ids = new Dictionary<string, Guid>();

        public ResourceTransformer(string fileName, string targetFileName)
        {
            if (fileName == null)
                throw new ArgumentNullException("fileName");

            _fileName = fileName;
            _targetFileName = targetFileName;
        }

        public int Transform()
        {
            var document = XDocument.Load(_fileName);

            var imports = document.Root.Element(Ns + "imports");

            if (imports != null)
            {
                foreach (var import in document.Root.Element(Ns + "imports").Elements(Ns + "import"))
                {
                    string basePath = Path.GetDirectoryName(_fileName);
                    string from = Path.GetFullPath(Path.Combine(basePath, import.Attribute("from").Value));

                    if (!File.Exists(from))
                        throw new Exception("Cannot found import " + from);

                    var assembly = Assembly.Load(File.ReadAllBytes(from));
                    var type = assembly.GetType(import.Attribute("type").Value, true);
                    var prefixAttribute = import.Attribute("prefix");
                    string prefix = prefixAttribute != null ? prefixAttribute.Value : "";

                    foreach (var field in type.GetFields(BindingFlags.Public | BindingFlags.Static))
                    {
                        if (typeof(Guid).IsAssignableFrom(field.FieldType))
                            _ids.Add(prefix + field.Name, (Guid)field.GetValue(null));
                    }
                }

                imports.Remove();
            }

            TransformElement(document.Root.Element(Ns + "ui"));

            document.Root.AddBeforeSelf(new XComment(
@"
    This code was generated by a tool.

    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
"));

            WriteWhenChanged(_targetFileName, document + Environment.NewLine);

            return 0;
        }

        private void WriteWhenChanged(string fileName, string content)
        {
            if (
                !File.Exists(fileName) ||
                File.ReadAllText(fileName, Encoding) != content
            )
                File.WriteAllText(fileName, content, Encoding);
        }

        private void TransformElement(XElement element)
        {
            TransformElement(element, "id", "guid");
            TransformElement(element, "fillCommandId", "fillCommandGuid");

            foreach (var child in element.Elements())
            {
                TransformElement(child);
            }
        }

        private void TransformElement(XElement element, string attributeName, string guidAttributeName)
        {
            var attribute = element.Attribute(attributeName);

            if (attribute != null)
            {
                Guid guid;

                if (_ids.TryGetValue(attribute.Value, out guid))
                    element.Add(new XAttribute(guidAttributeName, guid.ToString("B").ToUpperInvariant()));
            }
        }
    }
}
